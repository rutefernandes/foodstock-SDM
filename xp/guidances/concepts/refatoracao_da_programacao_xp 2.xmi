<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-SccAPGvHGWNL5WoKP-BsDA" name="refactoring_xp_programming,1.4410217108363206E-306" guid="-SccAPGvHGWNL5WoKP-BsDA" changeDate="2006-11-09T21:20:46.023-0300" version="1.0.0">
  <mainDescription>&lt;a id=&quot;XE_xp__refactoring&quot; name=&quot;XE_xp__refactoring&quot;>&lt;/a>&lt;a id=&quot;XE_refactoring__practice_of&quot; name=&quot;XE_refactoring__practice_of&quot;>&lt;/a>&lt;a id=&quot;XE_engineering_practices__refactoring&quot; name=&quot;XE_engineering_practices__refactoring&quot;>&lt;/a> &#xD;
&lt;h3>Descrição&lt;/h3>&#xD;
&lt;p>A refatoração é a prática de melhorar o design de um sistema sem alterar o seu comportamento. A refatoração é uma prática e habilidade crítica no desenvolvimento iterativo. O programador ou está adicionando uma nova funcionalidade ou está refatorando. Os programadores XP escolhem conscientemente entre refatorar ou adicionar novas funcionalidades a cada minuto. Algumas refatorações são triviais, tais como renomear ou mover coisas. Outras lhe permitem trocar uma lógica de procedimento por polimorfismo e, ainda existem refatorações maiores para implementar padrões de projeto.&lt;/p>&#xD;
&lt;p>Apesar dos processos como a Programação Extrema se apoiarem na refatoração para permitir que o design apareça, a utilidade da refatoração vai além das Metodologias Ágeis. Como as solicitações de funcionalidades e a correção de erros necessitam de alterações em um sistema, as técnicas de refatoração permitem que os programadores mantenham um bom design. A refatoração também pode ser usada para melhorar o design de um sistema existente.&lt;/p>&#xD;
&lt;p>A refatoração não é algo novo. Os desenvolvedores têm refatorado durante anos, embora só recentemente as pessoas tenham começado a catalogar as refatorações. A refatoração tornou-se uma parte tão importante do desenvolvimento que, ambientes de desenvolvimento integrado (IDEs) de nível profissional, incluem ferramentas embutidas ou têm plug-ins para apoiar a refatoração.&lt;/p>&#xD;
&lt;p>Se o seu sistema não for refatorado quando ele for modificado, o seu design irá deteriorar; os métodos tornam-se mais longos, as classes ganham mais responsabilidades, mais código é recortado e colado em seu sistema e o código a ser recortado e colado deve previamente ser modificado em vários lugares.&lt;/p>&#xD;
&lt;p>Se o seu sistema se tornar frágil e inflexível, seus desenvolvedores terão que gastar muito mais tempo e dinheiro para adicionar funcionalidades ou corrigir erros. À medida que o design continuar a deteriorar-se, a correção de um erro irá criar mais dois, ou o custo da adição de uma nova funcionalidade excederá o benefício de tê-la, porque uma grande parte do sistema terá que ser modificada. Existem muitas analogias para descrever esta batalha contra a entropia.&lt;/p>&#xD;
&lt;p>Conhecer as refatorações não é suficiente. Os desenvolvedores devem ser capazes de identificar áreas problemáticas no design do programa (muitas vezes referenciadas como &quot;cheiros&quot;). Existem locais onde a refatoração pode ser usada para melhorar o design do código. A experiência e a habilidade com o design são necessários para detectar o cheiro de um código ruim.&lt;/p>&#xD;
&lt;p>Os testes automatizados fornecem uma rede de segurança quando se faz mudanças. Os testes automatizados informam quando a funcionalidade do sistema muda. Faça uma mudança estrutural no software e veja se os testes continuam executando com sucesso. você pode refatorar confiantemente.&lt;/p>&#xD;
&lt;p>De onde vêm todos estes testes? Na XP, eles são desenvolvidos usando o &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../xp/guidances/concepts/test_driven_development_DACEB1AF.html&quot; guid=&quot;1.620567348185129E-306&quot;>Desenvolvimento Dirigido por Testes&lt;/a>. É possível refatorar sem testes, mas você corre o risco de introduzir erros inconscientemente ou danificar uma funcionalidade existente.&lt;/p>&#xD;
&lt;h3>Benefícios&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>Permite que o design surja ao longo do tempo.&lt;/li>&#xD;
    &lt;li>Mantém o design longe do sucateamento.&lt;/li>&#xD;
    &lt;li>Reduz os custos de mudanças.&lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>Informações Relacionadas&lt;/h3>&#xD;
&lt;p>Veja &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../xp/guidances/guidelines/refactoring_3FE6DCA.html&quot; guid=&quot;8.137126904637637E-306&quot;>Diretrizes para Refatoração&lt;/a>.&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
