<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-TBjyFDo7ZPV6jaXdr0JwFg" name="refactoring,8.137126904637637E-306" guid="-TBjyFDo7ZPV6jaXdr0JwFg" changeDate="2009-02-26T21:01:19.421-0300" version="1.0.0">
  <mainDescription>&lt;h3>&#xD;
    Tópicos&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#WhatIs&quot;>O que é refatoração?&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Why&quot;>Por que devo refatorar?&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#When&quot;>Quando devo refatorar?&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Example&quot;>Um exemplo de refatoração&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;WhatIs&quot; name=&quot;WhatIs&quot;>O que é refatoração?&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A refatoração é o ato de melhorar a estrutura de um programa sem alterar o seu comportamento. A refatoração é feita em&#xD;
    poucos pequenos passos, cada um valendo o que faz. Entre cada passo, executamos os testes de unidade relevantes para&#xD;
    certificar que as mudanças que fizemos não prejudicaram nada. O ciclo de edição, compilação e testes dura normalmente&#xD;
    de 30 segundos a cinco minutos.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Why&quot; name=&quot;Why&quot;>Por que devo refatorar?&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A finalidade da refatoração é melhorar o design e a legibilidade do código. Existem várias metas específicas:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        O código deve passar em todos os seus testes.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ele deve ser o mais expressivo possível que você possa fazer.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ele deve ser o mais simples possível que você possa fazer.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ele não deve ter nenhuma redundância.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;When&quot; name=&quot;When&quot;>Quando devo refatorar?&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A refatoração não é algo que possamos agendar. Não existe nenhuma entrada no cronograma para ela. Não existe nenhum&#xD;
    momento especial para fazê-la. A refatoração é feita o tempo todo. Quando você e seu parceiro estiverem trabalhando em&#xD;
    uma tarefa, tal como escrever testes e código, vocês notarão que o código e os testes não estão tão limpos e simples&#xD;
    quanto poderiam estar. Esta é a hora de parar e refatorar o código.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A regra é: &lt;b>Não deixe que o sol se ponha com código ruim.&lt;/b>&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Example&quot; name=&quot;Example&quot;>Um exemplo de refatoração&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Considere os dois testes de unidade e a classe &lt;font size=&quot;3&quot;>&lt;tt>Formatter&lt;/tt>&lt;/font> abaixo. A classe &lt;font&#xD;
    size=&quot;3&quot;>&lt;tt>Formatter&lt;/tt>&lt;/font> funciona, mas não é tão expressiva como eu gostaria que fosse. Então eu vou&#xD;
    refatorá-la em etapas.&#xD;
&lt;/p>&#xD;
&lt;table width=&quot;100%&quot; border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; public void testCenterLine() {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Formatter f = new Formatter();&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; f.setLineWidth(10);&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; assertEquals(&quot; word &quot;, f.center(&quot;word&quot;));&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; public void testOddCenterLine() throws Exception {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Formatter f = new Formatter();&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; f.setLineWidth(10);&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; assertEquals(&quot; hello &quot;, f.center(&quot;hello&quot;));&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&lt;br />&#xD;
&lt;br />&#xD;
&lt;table width=&quot;100%&quot; border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; import java.util.Arrays;&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; public class Formatter {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; private int width;&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; private char spaces[];&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public void setLineWidth(int width) {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.width = width;&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; spaces = new char[width];&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Arrays.fill(spaces, ' ');&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public String center(String line) {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int remainder = 0;&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; StringBuffer b = new StringBuffer();&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int padding = (width - line.length()) / 2;&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; remainder = line.length() % 2;&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; b.append(spaces, 0, padding);&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; b.append(line);&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; b.append(spaces, 0, padding + remainder);&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return b.toString();&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&#xD;
&lt;p>&#xD;
    A função &lt;font size=&quot;3&quot;>&lt;tt>setLineWidth&lt;/tt>&lt;/font> está um pouco misteriosa. O que é este array &lt;font&#xD;
    size=&quot;3&quot;>&lt;tt>spaces&lt;/tt>&lt;/font> e porque é preenchido com espaços em branco? Olhando adiante, a função &lt;font&#xD;
    size=&quot;3&quot;>&lt;tt>center&lt;/tt>&lt;/font>, vemos que o array &lt;font size=&quot;3&quot;>&lt;tt>spaces&lt;/tt>&lt;/font> é apenas uma conveniência para&#xD;
    nos permitir mover uma série de espaços em branco para um &lt;font size=&quot;3&quot;>&lt;tt>StringBuffer&lt;/tt>&lt;/font>. Questiono se&#xD;
    precisamos realmente deste array de conveniência.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Por enquanto, eu irei inicializar o array com sua própria função denominada &lt;font&#xD;
    size=&quot;3&quot;>&lt;tt>buildArrayOfSpaces&lt;/tt>&lt;/font>. Dessa forma, tudo está em um só lugar, e posso pensar sobre isso com um&#xD;
    pouco mais de clareza.&#xD;
&lt;/p>&#xD;
&lt;table width=&quot;100%&quot; border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public void setLineWidth(int width) {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.width = width;&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b>buildArrayOfSpaces(width);&lt;/b>&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; private void &lt;b>buildArrayOfSpaces(int width)&lt;/b> {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; spaces = new char[width];&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Arrays.fill(spaces, ' ');&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &lt;font size=&quot;3&quot;>&lt;b>&lt;i>Executo os testes: os testes passam&lt;/i>&lt;/b>&lt;/font>&lt;br />&#xD;
                &lt;br />&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&#xD;
&lt;p>&#xD;
    Eu não gosto da forma como a função &lt;font size=&quot;3&quot;>&lt;tt>center&lt;/tt>&lt;/font> foi construída. Existe matemática espalhada&#xD;
    por toda parte. Creio que podemos reorganizar a matemática para tornar as coisas mais claras.&#xD;
&lt;/p>&#xD;
&lt;table width=&quot;100%&quot; border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public String center(String line) {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b>int remainder = line.length() % 2;&lt;/b>&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b>int numberOfBlanksInFront = (width - line.length()) /&#xD;
                2;&lt;/b>&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b>int numberOfBlanksAtEnd = (width - line.length()) / 2 +&#xD;
                remainder;&lt;/b>&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; StringBuffer b = new StringBuffer();&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; b.append(spaces, 0, &lt;b>numberOfBlanksInFront&lt;/b>);&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; b.append(line);&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; b.append(spaces, 0, &lt;b>numberOfBlanksAtEnd&lt;/b>);&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return b.toString();&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &lt;font size=&quot;3&quot;>&lt;b>&lt;i>Executo os testes: os testes passam&lt;/i>&lt;/b>&lt;/font>&lt;br />&#xD;
                &lt;br />&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&#xD;
&lt;p>&#xD;
    Agora parece melhor, mas podemos reduzir a desordem, transformando algumas variáveis em funções.&#xD;
&lt;/p>&#xD;
&lt;table width=&quot;100%&quot; border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public String center(String line) {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; StringBuffer b = new StringBuffer();&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; b.append(spaces, 0, &lt;b>numberOfBlanksInFront(line)&lt;/b>);&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; b.append(line);&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; b.append(spaces, 0, &lt;b>numberOfBlanksBehind(line)&lt;/b>);&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return b.toString();&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b>private int numberOfBlanksBehind(String line) {&lt;/b>&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b>int extraBlankIfOdd = line.length() % 2;&lt;/b>&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b>return (width - line.length()) / 2 +&#xD;
                extraBlankIfOdd;&lt;/b>&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b>}&lt;/b>&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b>private int numberOfBlanksInFront(String line) {&lt;/b>&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b>return (width - line.length()) / 2;&lt;/b>&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b>}&lt;/b>&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &lt;font size=&quot;3&quot;>&lt;b>&lt;i>Executo os testes: os testes passam&lt;/i>&lt;/b>&lt;/font>&lt;br />&#xD;
                &lt;br />&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&#xD;
&lt;p>&#xD;
    Isto torna a leitura da função &lt;font size=&quot;3&quot;>&lt;tt>center&lt;/tt>&lt;/font> um pouco melhor. Entretanto, o uso da função &lt;font&#xD;
    size=&quot;3&quot;>&lt;tt>StringBuffer.append&lt;/tt>&lt;/font> está um pouco confuso. Podemos melhorá-la um pouco, criando uma função&#xD;
    mais explícita.&#xD;
&lt;/p>&#xD;
&lt;table width=&quot;100%&quot; border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public String center(String line) {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; StringBuffer b = new StringBuffer();&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b>appendBlanks(b, numberOfBlanksInFront(line));&lt;/b>&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; b.append(line);&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b>appendBlanks(b, numberOfBlanksBehind(line));&lt;/b>&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return b.toString();&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;strong>private void appendBlanks(StringBuffer b, int numberOfBlanks)&#xD;
                {&lt;/strong>&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;strong>b.append(spaces, 0, numberOfBlanks);&lt;/strong>&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;strong>}&lt;/strong>&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &lt;font size=&quot;3&quot;>&lt;b>&lt;i>Executo os testes: os testes passam&lt;/i>&lt;/b>&lt;/font>&lt;br />&#xD;
                &lt;br />&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&#xD;
&lt;p>&#xD;
    Agora, podemos rescrever &lt;font size=&quot;3&quot;>&lt;tt>appendBlanks&lt;/tt>&lt;/font> para evitar usar o array &lt;font&#xD;
    size=&quot;3&quot;>&lt;tt>spaces&lt;/tt>&lt;/font>.&#xD;
&lt;/p>&#xD;
&lt;table width=&quot;100%&quot; border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; import java.util.Arrays;&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; public class Formatter {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; private int width;&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public void setLineWidth(int width) {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.width = width;&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public String center(String line) {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; StringBuffer b = new StringBuffer();&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; appendBlanks(b, numberOfBlanksInFront(line));&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; b.append(line);&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; appendBlanks(b, numberOfBlanksBehind(line));&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return b.toString();&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; private void appendBlanks(StringBuffer b, int numberOfBlanks) {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b>while(numberOfBlanks-- &amp;gt; 0)&lt;/b>&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b>b.append(' ');&lt;/b>&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; private int numberOfBlanksBehind(String line) {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int extraBlankIfOdd = line.length() % 2;&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return (width - line.length()) / 2 + extraBlankIfOdd;&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; private int numberOfBlanksInFront(String line) {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return (width - line.length()) / 2; }&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &lt;font size=&quot;3&quot;>&lt;b>&lt;i>Executo os testes: os testes passam&lt;/i>&lt;/b>&lt;/font>&lt;br />&#xD;
                &lt;br />&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&#xD;
&lt;p>&#xD;
    Os nomes de funções tais como &lt;font size=&quot;3&quot;>&lt;tt>numberOfBlanksBehind&lt;/tt>&lt;/font> implicam que o leitor saiba que elas&#xD;
    serão chamadas a partir da função &lt;font size=&quot;3&quot;>&lt;tt>center&lt;/tt>&lt;/font>. Devemos eliminar essa implicação renomeando&#xD;
    essas funções.&#xD;
&lt;/p>&#xD;
&lt;table width=&quot;100%&quot; border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; import java.util.Arrays;&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; public class Formatter {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; private int width;&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public void setLineWidth(int width) {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.width = width;&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public String center(String line) {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; StringBuffer b = new StringBuffer();&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; appendBlanks(b, &lt;b>numberOfBlanksToLeftOfCenter&lt;/b>(line));&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; b.append(line);&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; appendBlanks(b,&#xD;
                &lt;b>numberOfBlanksToRightOfCenter&lt;/b>(line));&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return b.toString();&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; private void appendBlanks(StringBuffer b, int numberOfBlanks) {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; while(numberOfBlanks-- &amp;gt; 0)&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; b.append(' ');&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; private int &lt;b>numberOfBlanksToRightOfCenter&lt;/b>(String line) {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int extraBlankIfOdd = line.length() % 2;&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return (width - line.length()) / 2 + extraBlankIfOdd;&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; private int &lt;b>numberOfBlanksToLeftOfCenter&lt;/b>(String line) {&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return (width - line.length()) / 2;&lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; }&lt;br />&#xD;
                &lt;br />&#xD;
                &amp;nbsp; &amp;nbsp; &lt;font size=&quot;3&quot;>&lt;b>&lt;i>Executo os testes: os testes passam&lt;/i>&lt;/b>&lt;/font>&lt;br />&#xD;
                &lt;br />&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&#xD;
&lt;p>&#xD;
    E acho que acabamos. Você poderá fazer outros tipos de refatorações, ou talvez não concorde com todas as refatorações&#xD;
    que eu fiz. Isso é esperado. A questão é, contudo, que eu fiz um grande esforço para melhorar a legibilidade e a&#xD;
    simplicidade desta classe. Este esforço irá ajudar as outras pessoas a compreender esta classe e facilitará a mudança&#xD;
    quando chegar a hora.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
